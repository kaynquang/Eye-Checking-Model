import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from tkinter import PhotoImage
import threading
import os
import sys
import platform
from PIL import Image, ImageTk
import cv2
import numpy as np

# Import m√¥ h√¨nh
try:
    from eye_detection_pytorch import EyeStateDetectorPyTorch
    import torch
    PYTORCH_AVAILABLE = True
except ImportError:
    PYTORCH_AVAILABLE = False
    print("PyTorch kh√¥ng c√≥ s·∫µn. Vui l√≤ng c√†i ƒë·∫∑t: pip install torch torchvision")

class EyeDetectionGUI:
    def __init__(self, root):
        self.root = root
        self.setup_window()
        self.detector = None
        self.training_thread = None
        self.is_training = False
        
        # Thi·∫øt l·∫≠p giao di·ªán
        self.create_widgets()
        
    def setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        self.root.title("üëÅÔ∏è Eye State Detection - Nh·∫≠n di·ªán tr·∫°ng th√°i m·∫Øt")
        self.root.geometry("800x700")
        self.root.resizable(True, True)
        
        # Ph√°t hi·ªán h·ªá ƒëi·ªÅu h√†nh
        self.os_type = platform.system()
        
        if self.os_type == "Darwin":  # macOS
            self.root.configure(bg='#f0f0f0')
            # Thi·∫øt l·∫≠p font cho macOS
            self.title_font = ("SF Pro Display", 18, "bold")
            self.button_font = ("SF Pro Display", 12)
            self.text_font = ("SF Pro Display", 11)
        elif self.os_type == "Windows":  # Windows
            self.root.configure(bg='#f0f0f0')
            # Thi·∫øt l·∫≠p font cho Windows
            self.title_font = ("Segoe UI", 16, "bold")
            self.button_font = ("Segoe UI", 10)
            self.text_font = ("Segoe UI", 9)
        else:  # Linux
            self.title_font = ("Arial", 16, "bold")
            self.button_font = ("Arial", 10)
            self.text_font = ("Arial", 9)
    
    def create_widgets(self):
        """T·∫°o c√°c widget"""
        # Frame ch√≠nh
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # C·∫•u h√¨nh grid weight
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # Ti√™u ƒë·ªÅ
        title_label = ttk.Label(main_frame, text="üëÅÔ∏è EYE STATE DETECTION", 
                               font=self.title_font)
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # Th√¥ng tin h·ªá ƒëi·ªÅu h√†nh
        os_info = f"üñ•Ô∏è H·ªá ƒëi·ªÅu h√†nh: {self.os_type}"
        os_label = ttk.Label(main_frame, text=os_info, font=self.text_font)
        os_label.grid(row=1, column=0, columnspan=3, pady=(0, 10))
        
        # Ph·∫ßn 1: Training
        training_frame = ttk.LabelFrame(main_frame, text="üöÄ TRAINING MODEL", padding="10")
        training_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        training_frame.columnconfigure(1, weight=1)
        
        # N√∫t training
        self.train_button = ttk.Button(training_frame, text="üéØ B·∫ÆT ƒê·∫¶U TRAINING", 
                                      command=self.start_training,
                                      style="Accent.TButton")
        self.train_button.grid(row=0, column=0, padx=(0, 10), pady=5)
        
        # Progress bar
        self.progress = ttk.Progressbar(training_frame, mode='indeterminate')
        self.progress.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=5)
        
        # Status training
        self.train_status = ttk.Label(training_frame, text="S·∫µn s√†ng ƒë·ªÉ training", 
                                     font=self.text_font)
        self.train_status.grid(row=1, column=0, columnspan=2, pady=5)
        
        # Ph·∫ßn 2: Prediction
        predict_frame = ttk.LabelFrame(main_frame, text="üîç NH·∫¨N DI·ªÜN ·∫¢NH", padding="10")
        predict_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        predict_frame.columnconfigure(1, weight=1)
        
        # N√∫t ch·ªçn ·∫£nh
        self.select_button = ttk.Button(predict_frame, text="üìÅ CH·ªåN ·∫¢NH", 
                                       command=self.select_image)
        self.select_button.grid(row=0, column=0, padx=(0, 10), pady=5)
        
        # ƒê∆∞·ªùng d·∫´n file
        self.file_path = tk.StringVar()
        self.file_entry = ttk.Entry(predict_frame, textvariable=self.file_path, 
                                   state="readonly", font=self.text_font)
        self.file_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=5)
        
        # N√∫t predict
        self.predict_button = ttk.Button(predict_frame, text="üîÆ NH·∫¨N DI·ªÜN", 
                                        command=self.predict_image,
                                        state="disabled")
        self.predict_button.grid(row=1, column=0, columnspan=2, pady=10)
        
        # Ph·∫ßn 3: Hi·ªÉn th·ªã k·∫øt qu·∫£
        result_frame = ttk.LabelFrame(main_frame, text="üìä K·∫æT QU·∫¢", padding="10")
        result_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 20))
        result_frame.columnconfigure(0, weight=1)
        result_frame.rowconfigure(1, weight=1)
        main_frame.rowconfigure(4, weight=1)
        
        # K·∫øt qu·∫£ text
        self.result_text = tk.Text(result_frame, height=8, wrap=tk.WORD, 
                                  font=self.text_font, state="disabled")
        self.result_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # Scrollbar cho text
        scrollbar = ttk.Scrollbar(result_frame, orient="vertical", command=self.result_text.yview)
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S), pady=(0, 10))
        self.result_text.configure(yscrollcommand=scrollbar.set)
        
        # Frame cho ·∫£nh
        self.image_frame = ttk.Frame(result_frame)
        self.image_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Label hi·ªÉn th·ªã ·∫£nh
        self.image_label = ttk.Label(self.image_frame, text="Ch∆∞a c√≥ ·∫£nh ƒë∆∞·ª£c ch·ªçn")
        self.image_label.pack(expand=True, fill="both")
        
        # Ph·∫ßn 4: Utilities
        util_frame = ttk.LabelFrame(main_frame, text="üõ†Ô∏è TI·ªÜN √çCH", padding="10")
        util_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E))
        
        # N√∫t m·ªü th∆∞ m·ª•c
        self.open_folder_button = ttk.Button(util_frame, text="üìÇ M·ªû TH∆Ø M·ª§C DATASET", 
                                           command=self.open_dataset_folder)
        self.open_folder_button.grid(row=0, column=0, padx=(0, 10), pady=5)
        
        # N√∫t reset
        self.reset_button = ttk.Button(util_frame, text="üîÑ RESET", 
                                      command=self.reset_all)
        self.reset_button.grid(row=0, column=1, padx=10, pady=5)
        
        # N√∫t exit
        self.exit_button = ttk.Button(util_frame, text="‚ùå THO√ÅT", 
                                     command=self.root.quit)
        self.exit_button.grid(row=0, column=2, padx=(10, 0), pady=5)
        
        # Kh·ªüi t·∫°o detector n·∫øu c√≥ PyTorch
        if PYTORCH_AVAILABLE:
            self.update_result("‚úÖ PyTorch ƒë√£ s·∫µn s√†ng!\n")
            self.init_detector()
        else:
            self.update_result("‚ùå PyTorch ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!\n")
            self.update_result("Vui l√≤ng ch·∫°y: pip install torch torchvision\n")
    
    def init_detector(self):
        """Kh·ªüi t·∫°o detector"""
        try:
            self.detector = EyeStateDetectorPyTorch()
            self.update_result("ü§ñ Detector ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!\n")
            
            # Ki·ªÉm tra xem c√≥ model ƒë√£ train ch∆∞a
            if os.path.exists('eye_state_model.pt'):
                self.detector.create_model()
                self.detector.load_model('eye_state_model.pt')
                self.update_result("üì¶ ƒê√£ load model c√≥ s·∫µn: eye_state_model.pt\n")
                self.predict_button.configure(state="normal")
            else:
                self.update_result("‚ö†Ô∏è  Ch∆∞a c√≥ model ƒë∆∞·ª£c train. H√£y training tr∆∞·ªõc!\n")
                
        except Exception as e:
            self.update_result(f"‚ùå L·ªói kh·ªüi t·∫°o detector: {str(e)}\n")
    
    def start_training(self):
        """B·∫Øt ƒë·∫ßu training"""
        if self.is_training:
            self.update_result("‚ö†Ô∏è  Training ƒëang ch·∫°y!\n")
            return
            
        if not PYTORCH_AVAILABLE:
            messagebox.showerror("L·ªói", "PyTorch ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
            return
            
        # Ki·ªÉm tra dataset
        if not os.path.exists("Eye_dataset"):
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c Eye_dataset!")
            return
        
        # X√°c nh·∫≠n training
        result = messagebox.askyesno("X√°c nh·∫≠n", 
                                   "B·∫Øt ƒë·∫ßu training? Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t.")
        if not result:
            return
        
        # Disable n√∫t training
        self.train_button.configure(state="disabled", text="üîÑ ƒêANG TRAINING...")
        self.progress.start()
        self.is_training = True
        
        # Ch·∫°y training trong thread ri√™ng
        self.training_thread = threading.Thread(target=self.run_training)
        self.training_thread.daemon = True
        self.training_thread.start()
    
    def run_training(self):
        """Ch·∫°y training trong background"""
        try:
            self.update_result("üöÄ B·∫Øt ƒë·∫ßu training...\n")
            self.update_train_status("ƒêang load dataset...")
            
            # Kh·ªüi t·∫°o detector m·ªõi
            detector = EyeStateDetectorPyTorch()
            
            # Load dataset
            image_paths, labels = detector.load_dataset()
            self.update_result(f"üìä T·ªïng s·ªë ·∫£nh: {len(image_paths)}\n")
            
            self.update_train_status("ƒêang ti·ªÅn x·ª≠ l√Ω ·∫£nh...")
            # Preprocess
            X, y = detector.preprocess_images(image_paths, labels)
            
            self.update_train_status("ƒêang chia dataset...")
            # Split dataset
            from sklearn.model_selection import train_test_split
            X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)
            X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42, stratify=y_temp)
            
            self.update_result(f"üìà Training set: {X_train.shape[0]} ·∫£nh\n")
            self.update_result(f"üìä Validation set: {X_val.shape[0]} ·∫£nh\n")
            self.update_result(f"üß™ Test set: {X_test.shape[0]} ·∫£nh\n")
            
            self.update_train_status("ƒêang t·∫°o m√¥ h√¨nh...")
            # T·∫°o m√¥ h√¨nh
            model = detector.create_model()
            
            self.update_train_status("ƒêang training m√¥ h√¨nh...")
            # Train v·ªõi √≠t epochs h∆°n cho demo
            detector.train_model(X_train, y_train, X_val, y_val, epochs=20, batch_size=32)
            
            self.update_train_status("ƒêang ƒë√°nh gi√° m√¥ h√¨nh...")
            # Load best model v√† ƒë√°nh gi√°
            detector.load_model('best_eye_model.pt')
            y_pred, y_true = detector.evaluate_model(X_test, y_test)
            
            # L∆∞u m√¥ h√¨nh cu·ªëi c√πng
            detector.save_model()
            
            self.update_result("‚úÖ Training ho√†n th√†nh!\n")
            self.update_result("üìÅ ƒê√£ l∆∞u: eye_state_model.pt v√† best_eye_model.pt\n")
            
            # C·∫≠p nh·∫≠t detector cho prediction
            self.detector = detector
            self.predict_button.configure(state="normal")
            
        except Exception as e:
            self.update_result(f"‚ùå L·ªói training: {str(e)}\n")
        finally:
            # Reset UI
            self.root.after(0, self.training_finished)
    
    def training_finished(self):
        """G·ªçi khi training xong"""
        self.progress.stop()
        self.train_button.configure(state="normal", text="üéØ B·∫ÆT ƒê·∫¶U TRAINING")
        self.update_train_status("Training ho√†n th√†nh!")
        self.is_training = False
    
    def select_image(self):
        """Ch·ªçn ·∫£nh ƒë·ªÉ predict"""
        file_types = [
            ("Image files", "*.png *.jpg *.jpeg *.bmp *.gif *.tiff"),
            ("PNG files", "*.png"),
            ("JPG files", "*.jpg *.jpeg"),
            ("All files", "*.*")
        ]
        
        filename = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán",
            filetypes=file_types,
            initialdir="Eye_dataset" if os.path.exists("Eye_dataset") else "."
        )
        
        if filename:
            self.file_path.set(filename)
            self.display_image(filename)
            if self.detector and hasattr(self.detector, 'model') and self.detector.model:
                self.predict_button.configure(state="normal")
    
    def display_image(self, image_path):
        """Hi·ªÉn th·ªã ·∫£nh ƒë√£ ch·ªçn"""
        try:
            # Load v√† resize ·∫£nh
            image = Image.open(image_path)
            
            # T√≠nh to√°n k√≠ch th∆∞·ªõc hi·ªÉn th·ªã (max 300x300)
            display_size = (300, 300)
            image.thumbnail(display_size, Image.Resampling.LANCZOS)
            
            # Convert sang PhotoImage
            photo = ImageTk.PhotoImage(image)
            
            # Hi·ªÉn th·ªã
            self.image_label.configure(image=photo, text="")
            self.image_label.image = photo  # Gi·ªØ reference
            
        except Exception as e:
            self.update_result(f"‚ùå L·ªói hi·ªÉn th·ªã ·∫£nh: {str(e)}\n")
    
    def predict_image(self):
        """Nh·∫≠n di·ªán ·∫£nh"""
        if not self.detector or not hasattr(self.detector, 'model') or not self.detector.model:
            messagebox.showerror("L·ªói", "Ch∆∞a c√≥ model! H√£y training tr∆∞·ªõc!")
            return
            
        image_path = self.file_path.get()
        if not image_path:
            messagebox.showerror("L·ªói", "Ch∆∞a ch·ªçn ·∫£nh!")
            return
        
        try:
            # Predict
            result, confidence = self.detector.predict_single_image(image_path)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            filename = os.path.basename(image_path)
            self.update_result(f"\nüîç NH·∫¨N DI·ªÜN: {filename}\n")
            self.update_result(f"üìä K·∫øt qu·∫£: {result}\n")
            self.update_result(f"üéØ ƒê·ªô tin c·∫≠y: {confidence:.1f}%\n")
            
            # Th√™m emoji theo k·∫øt qu·∫£
            if "m·ªü" in result.lower():
                self.update_result("üòä M·∫Øt ƒëang m·ªü!\n")
            else:
                self.update_result("üò¥ M·∫Øt ƒëang nh·∫Øm!\n")
                
            self.update_result("-" * 40 + "\n")
            
        except Exception as e:
            self.update_result(f"‚ùå L·ªói predict: {str(e)}\n")
    
    def open_dataset_folder(self):
        """M·ªü th∆∞ m·ª•c dataset"""
        if self.os_type == "Darwin":  # macOS
            os.system("open Eye_dataset" if os.path.exists("Eye_dataset") else "open .")
        elif self.os_type == "Windows":  # Windows
            os.system("explorer Eye_dataset" if os.path.exists("Eye_dataset") else "explorer .")
        else:  # Linux
            os.system("xdg-open Eye_dataset" if os.path.exists("Eye_dataset") else "xdg-open .")
    
    def reset_all(self):
        """Reset t·∫•t c·∫£"""
        self.file_path.set("")
        self.image_label.configure(image="", text="Ch∆∞a c√≥ ·∫£nh ƒë∆∞·ª£c ch·ªçn")
        self.image_label.image = None
        self.predict_button.configure(state="disabled")
        
        # Clear result text
        self.result_text.configure(state="normal")
        self.result_text.delete(1.0, tk.END)
        self.result_text.configure(state="disabled")
        
        self.update_result("üîÑ ƒê√£ reset giao di·ªán!\n")
    
    def update_result(self, text):
        """C·∫≠p nh·∫≠t text k·∫øt qu·∫£"""
        self.result_text.configure(state="normal")
        self.result_text.insert(tk.END, text)
        self.result_text.see(tk.END)
        self.result_text.configure(state="disabled")
        self.root.update_idletasks()
    
    def update_train_status(self, text):
        """C·∫≠p nh·∫≠t status training"""
        self.train_status.configure(text=text)
        self.root.update_idletasks()

def main():
    """H√†m main"""
    root = tk.Tk()
    app = EyeDetectionGUI(root)
    
    # Thi·∫øt l·∫≠p style cho t·ª´ng OS
    style = ttk.Style()
    
    if platform.system() == "Darwin":  # macOS
        try:
            # S·ª≠ d·ª•ng native macOS theme n·∫øu c√≥
            style.theme_use("aqua")
        except:
            style.theme_use("clam")
    elif platform.system() == "Windows":  # Windows
        try:
            # S·ª≠ d·ª•ng Windows 10/11 theme n·∫øu c√≥
            style.theme_use("vista")
        except:
            style.theme_use("clam")
    
    # Custom button style
    style.configure("Accent.TButton", font=app.button_font)
    
    root.mainloop()

if __name__ == "__main__":
    main() 